[project]
name = "hydrobricks"
version = "0.8.0"
authors = [
    { name = "Pascal Horton", email = "pascal.horton@unibe.ch" },
    { name = "Anne-Laure Argentin" },
]
description = "A modular hydrological modelling framework"
readme = "python/README.md"
requires-python = ">=3.10"
license = "MIT"
classifiers = [
    "Programming Language :: C++",
    "Programming Language :: Python :: 3"
]
dependencies = [
    "cftime",
    "numpy",
    "HydroErr",
    "pandas",
    "pyyaml",
    "StrEnum",
    "dask",
    "dask-expr"
]

[project.optional-dependencies]
test = ["pytest>=6.0"]

[project.urls]
"Source Code" = "https://github.com/hydrobricks/hydrobricks"
"Bug Tracker" = "https://github.com/hydrobricks/hydrobricks/issues"

[tool.setuptools]
packages = ["hydrobricks", "hydrobricks.models", "hydrobricks.actions", "hydrobricks.plotting", "hydrobricks.preprocessing"]
package-dir = { "hydrobricks" = "python/src/hydrobricks", "hydrobricks.models" = "python/src/hydrobricks/models", "hydrobricks.actions" = "python/src/hydrobricks/actions", "hydrobricks.plotting" = "python/src/hydrobricks/plotting", "hydrobricks.preprocessing" = "python/src/hydrobricks/preprocessing" }

[build-system]
requires = [
    "setuptools>=42",
    "wheel",
    "ninja",
    "cmake>=3.12"
]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 88

[tool.isort]
profile = "black"
known_first_party = ["_hydrobricks", "hydrobricks", "hydrobricks.*"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
    "error",  # Treat all warnings as errors
    "ignore:The 'shapely.geos' module is deprecated:DeprecationWarning",
    "ignore:The distutils package is deprecated:DeprecationWarning"
]
testpaths = ["python/tests"]

[tool.cibuildwheel]
test-requires = [
    "pytest",
    "cftime",
    "HydroErr",
    "numpy",
    "pandas",
    "pyyaml",
    "StrEnum",
    "dask",
    "dask-expr",
    "geopandas",
    "netCDF4",
    "pyet",
    "rasterio",
    "rioxarray",
    "shapely",
    "xarray",
    "pyarrow",
    "xarray-spatial",
    "pysheds",
    "datashader==0.17.0a0"
]
test-command = "pytest {project}/python/tests"
test-extras = "test"
archs = ["auto64"]
skip = ["*musllinux*", "cp37-*", "cp38-*", "cp39-*", "pp*"]
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
manylinux-ppc64le-image = "manylinux_2_28"
manylinux-s390x-image = "manylinux_2_28"
manylinux-pypy_x86_64-image = "manylinux_2_28"
manylinux-pypy_aarch64-image = "manylinux_2_28"
environment = {VCPKG_LIBRARY_LINKAGE="static"}
build-verbosity = 1

[tool.cibuildwheel.linux]
before-all = [ # Independent of Python version
    # Install system dependencies
    "yum install -y epel-release",
    "yum install -y perl perl-core perl-IPC-Cmd perl-Digest-SHA hdf5-devel",
    # Install vcpkg
    "git clone https://github.com/microsoft/vcpkg.git",
    "cd vcpkg",
    "./bootstrap-vcpkg.sh",
    "export VCPKG_ROOT=$PWD",
    "export PATH=$VCPKG_ROOT:$PATH",
    "cd ..",
    # Install vcpkg dependencies
    "export VCPKG_LIBRARY_LINKAGE=static",
    "vcpkg install",
]
before-build = [ # Depends on Python version
    "pip install cmake",
]

[tool.cibuildwheel.windows]
before-all = [ # Independent of Python version
    # Install vcpkg
    "git clone https://github.com/microsoft/vcpkg.git",
    "cd vcpkg",
    ".\\bootstrap-vcpkg.bat",
    "set VCPKG_ROOT=%cd%",
    "set PATH=%VCPKG_ROOT%;%PATH%",
    "cd ..",
    # Install vcpkg dependencies
    "set VCPKG_LIBRARY_LINKAGE=static",
    "vcpkg install",
]
before-build = [ # Depends on Python version
    "pip install cmake",
]

[tool.cibuildwheel.macos]
before-all = [ # Independent of Python version
    # Install system dependencies
    "brew install hdf5",
    # Install vcpkg
    "git clone https://github.com/microsoft/vcpkg.git",
    "cd vcpkg",
    "./bootstrap-vcpkg.sh",
    "export VCPKG_ROOT=$PWD",
    "export PATH=$VCPKG_ROOT:$PATH",
    "cd ..",
    # Install vcpkg dependencies
    "export VCPKG_LIBRARY_LINKAGE=static",
    "vcpkg install",
]
before-build = [  # Depends on Python version
    "pip install cmake",
]
